package com.plpgogogo.capsuleup.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.plpgogogo.capsuleup.database.Data;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA".
*/
public class DataDao extends AbstractDao<Data, Long> {

    public static final String TABLENAME = "DATA";

    /**
     * Properties of entity Data.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Userid = new Property(1, int.class, "userid", false, "USERID");
        public final static Property Money = new Property(2, double.class, "money", false, "MONEY");
        public final static Property Mtype = new Property(3, int.class, "mtype", false, "MTYPE");
        public final static Property Patten = new Property(4, int.class, "patten", false, "PATTEN");
        public final static Property Picture = new Property(5, String.class, "picture", false, "PICTURE");
        public final static Property Tape = new Property(6, String.class, "tape", false, "TAPE");
        public final static Property Tame = new Property(7, String.class, "tame", false, "TAME");
    };


    public DataDao(DaoConfig config) {
        super(config);
    }
    
    public DataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USERID\" INTEGER NOT NULL ," + // 1: userid
                "\"MONEY\" REAL NOT NULL ," + // 2: money
                "\"MTYPE\" INTEGER NOT NULL ," + // 3: mtype
                "\"PATTEN\" INTEGER NOT NULL ," + // 4: patten
                "\"PICTURE\" TEXT," + // 5: picture
                "\"TAPE\" TEXT," + // 6: tape
                "\"TAME\" TEXT NOT NULL );"); // 7: tame
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Data entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserid());
        stmt.bindDouble(3, entity.getMoney());
        stmt.bindLong(4, entity.getMtype());
        stmt.bindLong(5, entity.getPatten());
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(6, picture);
        }
 
        String tape = entity.getTape();
        if (tape != null) {
            stmt.bindString(7, tape);
        }
        stmt.bindString(8, entity.getTame());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Data readEntity(Cursor cursor, int offset) {
        Data entity = new Data( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userid
            cursor.getDouble(offset + 2), // money
            cursor.getInt(offset + 3), // mtype
            cursor.getInt(offset + 4), // patten
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // picture
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tape
            cursor.getString(offset + 7) // tame
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Data entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.getInt(offset + 1));
        entity.setMoney(cursor.getDouble(offset + 2));
        entity.setMtype(cursor.getInt(offset + 3));
        entity.setPatten(cursor.getInt(offset + 4));
        entity.setPicture(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTape(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTame(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Data entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Data entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
